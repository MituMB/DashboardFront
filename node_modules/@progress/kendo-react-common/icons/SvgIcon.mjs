/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as t from "react";
import n from "prop-types";
import { classNames as w } from "../classNames.mjs";
import { uSvgIcon as x } from "../unstyled/icons.mjs";
import { useUnstyled as R } from "../unstyled/main.mjs";
const y = t.forwardRef((e, b) => {
  const {
    children: z,
    className: a,
    svgClassName: N,
    icon: o,
    flip: c,
    id: p,
    tabIndex: I,
    size: h,
    style: s,
    svgStyle: M,
    themeColor: r,
    viewBox: m,
    name: O,
    onClick: S,
    ...B
  } = e, d = t.useRef(null), f = R(), u = f && f.uSvgIcon;
  t.useImperativeHandle(
    b,
    () => ({
      element: d.current
    })
  );
  const g = t.useMemo(() => o ? o.name : l.icon, [o]), v = t.useMemo(() => h || l.size, [h]), i = t.useMemo(() => c || l.flip, [c]), C = t.useMemo(() => m || l.viewBox, [m]), P = t.useMemo(
    () => w(
      x.wrapper({
        c: u,
        iconNameProp: g,
        themeColor: r,
        flipH: i === "horizontal" || i === "both",
        flipV: i === "vertical" || i === "both",
        size: v
      }),
      a
    ),
    [g, r, v, i, a]
  ), H = t.useMemo(() => e.width && e.height ? { width: e.width, height: e.height, ...s } : e.width ? { width: e.width, height: e.width, ...s } : e.height ? { width: e.height, height: e.height, ...s } : { ...s }, [e.width, e.height, s]);
  return /* @__PURE__ */ t.createElement(
    "span",
    {
      className: w(
        x.svg({
          c: u,
          themeColor: r,
          flipH: i === "horizontal" || i === "both",
          flipV: i === "vertical" || i === "both"
        }),
        P
      ),
      style: H,
      ref: d,
      onClick: S,
      "aria-hidden": !0
    },
    /* @__PURE__ */ t.createElement(
      "svg",
      {
        id: p,
        className: N,
        style: M,
        "aria-hidden": !0,
        tabIndex: I,
        focusable: !1,
        xmlns: "http://www.w3.org/2000/svg",
        viewBox: o ? o.viewBox : C,
        dangerouslySetInnerHTML: o ? { __html: o.content } : void 0,
        ...B
      },
      o ? void 0 : z
    )
  );
});
y.propTypes = {
  style: n.object,
  classNames: n.string,
  children: n.any,
  icon: n.object,
  themeColor: n.oneOf([
    "inherit",
    "primary",
    "secondary",
    "tertiary",
    "info",
    "success",
    "error",
    "warning",
    "dark",
    "light",
    "inverse"
  ]),
  size: n.oneOf(["default", "xsmall", "small", "medium", "large", "xlarge", "xxlarge", "xxxlarge"]),
  flip: n.oneOf(["default", "horizontal", "vertical", "both"])
};
const l = {
  size: "default",
  flip: "default",
  icon: "",
  viewBox: "0 0 24 24"
};
y.displayName = "KendoSvgIcon";
export {
  y as SvgIcon
};
